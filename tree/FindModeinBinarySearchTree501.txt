/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
        HashMap<Integer, Integer> map = new HashMap<>();
        inOrderRecur(root, map);
        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<>(
            new Comparator<Map.Entry<Integer, Integer>>() {
                public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2) {
                    return e2.getValue() - e1.getValue();
                }
        });
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            queue.add(entry);
        }
        int max = queue.peek().getValue();
        List<Integer> list = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue() == max){
                list.add(entry.getKey());
            }
        }
        int[] result = new int[list.size()];
        for(int i = 0; i<list.size(); i++){
            result[i] = list.get(i);
        }
        return result;

    }
    public void inOrderRecur(TreeNode root, HashMap<Integer, Integer> map){
        if(root == null){
            return;
        }
        inOrderRecur(root.left, map);
        if(map.containsKey(root.val)){
            int sum = map.get(root.val);
            map.replace(root.val, sum+1);
        }else{
            map.put(root.val, 1);
        }
        inOrderRecur(root.right, map);
    }

}